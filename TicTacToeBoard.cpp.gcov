        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:#include "TicTacToeBoard.h"
        -:    2:#include<iostream>
        -:    3:/**
        -:    4: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    5: * to represent the spaces on the board.
        -:    6:**/
        -:    7:
        -:    8://Constructor sets an empty board and specifies it is X's turn first
function _ZN14TicTacToeBoardC2Ev called 52 returned 100% blocks executed 100%
       52:    9:TicTacToeBoard::TicTacToeBoard()
        -:   10:{
       52:   11:  turn = X;
      208:   12:  for(int i=0; i<BOARDSIZE; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      624:   13:    for(int j=0; j<BOARDSIZE; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      468:   14:      board[i][j] = Blank;
       52:   15:}
        -:   16:
        -:   17:/**
        -:   18: * Switches turn member variable to represent whether it's X's or O's turn
        -:   19: * and returns whose turn it is
        -:   20:**/
function _ZN14TicTacToeBoard10toggleTurnEv called 120 returned 100% blocks executed 100%
      120:   21:Piece TicTacToeBoard::toggleTurn()
        -:   22:{
      120:   23:  if(turn == X)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       72:   24:     turn = O;
        -:   25:  else
       48:   26:     turn = X;
      120:   27:  return turn;
        -:   28:}
        -:   29:
        -:   30:/**
        -:   31: * Places the piece of the current turn on the board, returns what
        -:   32: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   33: * NOT allow to place a piece in a location where there is already a piece.
        -:   34: * In that case, placePiece just returns what is already at that location. 
        -:   35: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   36: * is over, no more pieces can be placed so attempting to place a piece
        -:   37: * should neither change the board nor change whose turn it is.
        -:   38:**/ 
function _ZN14TicTacToeBoard10placePieceEii called 117 returned 100% blocks executed 100%
      117:   39:Piece TicTacToeBoard::placePiece(int row, int column)
        -:   40:{
      117:   41:  if(row >= BOARDSIZE || column >= BOARDSIZE)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -:   42:  {
        -:   43://
        6:   44:    return Invalid;
        -:   45:  }
      111:   46:  else if(board[row][column] == Blank) 
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   47:  {
      105:   48:    board[row][column] = turn;
        -:   49:    //if(getWinner() != Invalid)
        -:   50:     // return getWinner();
      105:   51:    Piece rTurn = turn;
      105:   52:    toggleTurn();
call    0 returned 100%
      105:   53:    return rTurn;
        -:   54:  }
        -:   55:  else 
        -:   56:  {
        6:   57:    return board[row][column];
        -:   58:  }
        -:   59:   
        -:   60:}
        -:   61:
        -:   62:/**
        -:   63: * Returns what piece is at the provided coordinates, or Blank if there
        -:   64: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   65:**/
function _ZN14TicTacToeBoard8getPieceEii called 13 returned 100% blocks executed 100%
       13:   66:Piece TicTacToeBoard::getPiece(int row, int column)
        -:   67:{
       13:   68:  if(row >= BOARDSIZE || column >= BOARDSIZE)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:   69:  {
        -:   70://
        4:   71:    return Invalid;
        -:   72:  }
        9:   73:  else if(board[row][column] == Blank) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:  {
        3:   75:    return Blank;
        -:   76:  }
        -:   77:  else 
        -:   78:  {
        6:   79:    return board[row][column];
        -:   80:  }
        -:   81:}
        -:   82:
        -:   83:/**
        -:   84: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   85: * is not over, or Blank if the board is filled and no one has won.
        -:   86:**/
function _ZN14TicTacToeBoard9getWinnerEv called 15 returned 100% blocks executed 97%
       15:   87:Piece TicTacToeBoard::getWinner()
        -:   88:{
       51:   89:  for(int i =0; i < 3; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:   90:  {
       39:   91:      if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][2] != Blank)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
        3:   92:        return board[i][0];
        -:   93:  }
       42:   94:  for(int i =0; i < 3; i++)
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
        -:   95:  {
       33:   96:      if(board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[2][i] != Blank)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
        3:   97:        return board[0][i];
        -:   98:  }
        9:   99:  if(board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[2][0] != Blank)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
branch  4 taken 50% (fallthrough)
branch  5 taken 50%
        3:  100:    return board[2][0];
        6:  101:  if(board[0][0] == board[1][1] && board[1][1] == board[2][0] && board[2][2] != Blank)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    #####:  102:    return board[2][2];
       15:  103:  for(int i = 0; i < 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  104:  {
       39:  105:   for(int j = 0; j < 3; j++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  106:   {
       30:  107:     if(board[i][j] == Blank)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        3:  108:       return Invalid;
        -:  109:   }
        -:  110:  } 
        3:  111:  return Blank;
function _GLOBAL__sub_I__ZN14TicTacToeBoardC2Ev called 3 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 3 returned 100% blocks executed 100%
        9:  112:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
